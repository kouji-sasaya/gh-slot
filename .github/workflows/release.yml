name: release
on:
  push:
    tags:
      - "v*"
permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: amd64
            binary_suffix: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
            binary_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: amd64
            binary_suffix: ".exe"
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            platform: windows
            arch: arm64
            binary_suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
            arch: amd64
            binary_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: arm64
            binary_suffix: ""

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross (Linux ARM only)
        if: matrix.platform == 'linux' && matrix.arch == 'arm64'
        run: cargo install cross

      - name: Build binary
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "linux" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      
      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p dist
          binary_name="gh-slot-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.binary_suffix }}"
          cp target/${{ matrix.target }}/release/gh-slot${{ matrix.binary_suffix }} dist/$binary_name
          echo "Binary created: $binary_name"
          ls -la dist/
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: gh-slot-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/gh-slot-${{ matrix.platform }}-${{ matrix.arch }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy all binaries to release assets
          find artifacts -name "gh-slot-*" -type f -exec cp {} release-assets/ \;
          echo "Release assets prepared:"
          ls -la release-assets/
      
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "GitHub CLI extension release ${{ github.ref_name }} with precompiled binaries.
            
            ## Installation
            \`\`\`bash
            gh extension install kouji-sasaya/gh-slot
            \`\`\`
            
            ## Usage
            \`\`\`bash
            gh slot
            \`\`\`
            
            ## Available Binaries
            - `gh-slot-linux-amd64` - Linux x86_64
            - `gh-slot-linux-arm64` - Linux ARM64
            - `gh-slot-windows-amd64.exe` - Windows x86_64
            - `gh-slot-windows-arm64.exe` - Windows ARM64
            - `gh-slot-macos-amd64` - macOS x86_64
            - `gh-slot-macos-arm64` - macOS ARM64

            ## Supported Platforms
            - Linux (x86_64, ARM64)
            - Windows (x86_64, ARM64)
            - macOS (x86_64, ARM64)" \
            release-assets/*
